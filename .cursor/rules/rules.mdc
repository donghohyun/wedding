---
alwaysApply: true
---
# 핵심 개발 원칙
1. 현대적인 모범 사례에 대한 깊은 이해를 바탕으로 문제를 해결합니다.
2. 간결하고 효율적이며 유지보수 가능한 코드를 작성합니다.
3. 함수 시작 시 입력값을 검증하고, 오류나 예외 발생 시 조기에 반환하여 코드 흐름을 단순화합니다.

# 코드 품질 및 보안
1. 변수와 함수에 명확하고 설명적인 이름을 사용합니다.
2. 포괄적인 입력 검증, 정화, 보안 모범 사례를 구현합니다. (매개변수화된 쿼리, 민감한 데이터 노출 금지, 최소 권한 원칙 적용)
3. 프로젝트 전반에 걸쳐 일관된 코드 스타일과 포맷팅 규칙을 유지합니다
4. 주석은 **‘무엇(What)’이 아닌 ‘왜(Why)’와 ‘어떻게(How)’**에 집중합니다.

# 한국 개발 환경 통합
1. 구현 전 커뮤니케이션 프로세스를 통해 누락된 요구사항을 확인합니다.
2. API 문서는 영어로 작성합니다. 단, 코드 주석은 한국어로 작성합니다.

# 성능 및 최적화
1. 성능 영향을 고려하고 가독성을 희생하지 않으면서 알고리즘을 최적화 합니다.
2. 적절한 캐싱 전략을 구현하고 불필요한 계산을 피합니다.
3. 대규모 애플리케이션에 적용 가능한 경우 지연 로딩과 코드 분할을 사용합니다.

# 고급 문서화 및 아키텍처
1. 프로젝트 특성에 맞는 프로그래밍 패러다임을 선택하고, 가능할 경우 불변(immutable) 데이터 구조를 선호합니다.
2. 주석은 주기적으로 검토하여, 가치 있는 컨텍스트를 유지하면서 오래된 내용은 업데이트하거나 제거합니다.

# AI 도구 최적화
1. 모든 출력은 엄격히 검증하고 코드 생성을 위해 AI 역량을 활용합니다.
2. 원본 코드 의도를 유지하면서 리팩토링 제안에 AI를 사용합니다.
3. 최신 AI개발 도구로 지속적으로 업데이트 하고 적절히 통합합니다.

# 의존성 관리
1. 의존성 버전을 고정(Pin)합니다.
2. 운영용은 requirements.txt에,개발용은 별도로 분리하여 관리합니다.
3. 안정적인 패키지 버전을 사용합니다.

# 기타
테스트 원칙: 모든 주요 함수는 단위 테스트를 포함해야 하며, PR 시 테스트 통과를 필수 조건으로 합니다.
리뷰 원칙: 코드 리뷰는 기능의 정확성뿐 아니라 가독성, 보안성, 유지보수성 기준으로 수행합니다.
